#SAVEPOINT
    This command allow us to set a point a transaction to which you can later roll back.

    BEGIN ---------- . -------------- . --------------- . ------------- ROLLBACK
                 Savepoint 1     Savepoint 2       Savepoint n

    It is useful when we want to undo part of a tranasaction without rolling back the entire transaction.

    SYNTAX:
        SAVEPOINT savepoint_name;

    Example:
        CREATE TABLE EMP_INFO (
        ID INT PRIMARY KEY,
        NAME VARCHAR(50),
        SALARY INT
        );

        INSERT INTO EMP_INFO VALUES
        (101, 'Ravi', 5500),
        (102, 'Anita', 5800),
        (103, 'Suman', 5900);

    üîÑ Transaction with SAVEPOINT
        -- Step 1: Begin the transaction
        START TRANSACTION;

        -- Step 2: Make some updates
        UPDATE EMP_INFO SET SALARY = 5999 WHERE ID = 101;
        UPDATE EMP_INFO SET SALARY = 6000 WHERE ID = 103;

        -- Check current state
        SELECT * FROM EMP_INFO;

        -- Step 3: Set a savepoint
        SAVEPOINT sal_save;

        -- Step 4: Another update
        UPDATE EMP_INFO SET NAME = 'RAJU' WHERE ID = 103;

        -- Check state again
        SELECT * FROM EMP_INFO;
        üîÅ Now you have 3 options:
        ‚úÖ Option 1: COMMIT
            COMMIT;
        üîí This saves all changes permanently, including name change to "RAJU".

        üîÑ Option 2: Rollback Entire Transaction
            ROLLBACK;
        üõë This will undo everything ‚Äî no salary or name changes will persist.

        üîÇ Option 3: Rollback to Savepoint
            ROLLBACK TO sal_save;
        ‚è™ This undoes only the name update, but keeps the salary changes.

        After rolling back to sal_save, if you're satisfied, you can still COMMIT to save the salary updates:
            COMMIT;

        üîç Final Check
            SELECT * FROM EMP_INFO;