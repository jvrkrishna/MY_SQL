#INOUT PARAMETER:
    In MySQL, the INOUT parameter is used in stored procedures or functions to pass parameters that can both be input (received by the procedure) and output (modified by the procedure). This is different from an IN parameter, which only passes data into the procedure, or an OUT parameter, which only passes data back.

Input: The value is passed into the procedure when it is called.

Output: The procedure can modify this value, and the changes are reflected outside the procedure after execution.

Example:
‚úÖ MySQL Stored Procedure Examples with Parameters
We‚Äôll continue with the same EMP_INFO table:
    CREATE TABLE EMP_INFO (
        ID INT PRIMARY KEY,
        NAME VARCHAR(50),
        SALARY INT,
        ADDRESS VARCHAR(100)
    );

    INSERT INTO EMP_INFO VALUES
    (1, 'Ravi', 8000, 'Hyderabad'),
    (2, 'Anita', 9000, 'Delhi'),
    (3, 'Suman', 8500, 'Mumbai');

1Ô∏è‚É£ Stored Procedure with IN and OUT Parameters
üìå Use case: Pass a salary limit and get the count of employees earning more.
    DELIMITER $$

    CREATE PROCEDURE get_emp_count_above_salary (
        IN min_sal INT,
        OUT emp_count INT
    )
    BEGIN
        SELECT COUNT(*) INTO emp_count FROM EMP_INFO WHERE SALARY > min_sal;
    END $$
    DELIMITER ;

‚ñ∂Ô∏è Call it:
    CALL get_emp_count_above_salary(8500, @total);
    SELECT @total AS Count_Above_8500;

2Ô∏è‚É£ Stored Procedure with INOUT Parameter
üìå Use case: Pass a salary and increase it by 10% within the procedure.
    DELIMITER $$

    CREATE PROCEDURE increase_salary_by_10 (
        INOUT input_salary INT
    )
    BEGIN
        SET input_salary = input_salary + (input_salary * 0.10);
    END $$
    DELIMITER ;

‚ñ∂Ô∏è Call it:
SET @mysalary = 8000;
CALL increase_salary_by_10(@mysalary);
SELECT @mysalary AS New_Salary;
üîπ Result: New_Salary = 8800

3Ô∏è‚É£ Procedure with Multiple IN Parameters
üìå Use case: Pass department and minimum salary to filter records.
    DELIMITER $$

    CREATE PROCEDURE get_emps_by_dept_salary (
        IN dept_name VARCHAR(50),
        IN min_sal INT
    )
    BEGIN
        SELECT * FROM EMP_INFO
        WHERE ADDRESS = dept_name AND SALARY >= min_sal;
    END $$

    DELIMITER ;

‚ñ∂Ô∏è Call it:
CALL get_emps_by_dept_salary('Delhi', 8000);