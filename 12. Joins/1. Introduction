In MySQL, joins are used to combine rows from two or more tables based on a related column between them, allowing you to retrieve data from multiple tables in a single query. This is achieved by linking tables based on common columns, usually a primary key in one table and a foreign key in another. 

Why use joins?
Retrieve data from multiple tables:
    Joins enable you to pull data from different tables and combine it into a single result set.

Establish relationships:
    They help establish relationships between tables based on shared columns, creating a logical connection between the data. 

Efficient data querying:
    Joins make it easier to query data across multiple tables without needing to run separate queries for each table. 

Access related information:
    They allow you to access information related to specific records, such as retrieving customer details along with their orders. 

Types of joins in MySQL:
Inner Join or JOIN:
    Returns only the rows where there is a match in both tables based on the join condition. This is the most common type of join. 

Outer Join:
    (also known as Left or Right Join) Returns all rows from one table (the "outer" table) and the matching rows from the other table. If there's no match in the second table, the join will still return the row from the outer table, but with NULL values for columns from the other table. 

Left Outer Join (Left Join):
    Returns all rows from the left table and the matching rows from the right table. 

Right Outer Join (Right Join):
    Returns all rows from the right table and the matching rows from the left table. 

Full Outer Join:
    Returns all rows from both tables, including those that don't have a match in the other table. 

Cross Join:
    Returns the Cartesian product of the two tables, meaning every row from the first table is combined with every row from the second table, resulting in a large result set. 

Self Join:
    Joins a table with itself, allowing you to compare rows within the same table based on specific conditions. 

|--------------------------------------------------------------------------------- |
| **INNER JOIN**->Returns only rows where there‚Äôs a match in both tables.    
                                           
| **LEFT JOIN**->Returns all rows from the left table + matching from the right. NULL if no match. 
                    
| **RIGHT JOIN**->Returns all rows from the right table + matching from the left. NULL if no match. 
                    
| **FULL OUTER JOIN**->Returns all rows from both tables (MySQL does **not** support this natively; workaround via `UNION`). 

| **CROSS JOIN**->Returns the Cartesian product (every row of A with every row of B).                                   

| **SELF JOIN**->Joins a table to itself (e.g., finding employees reporting to the same manager).                      

*****************************************************************************
üèóÔ∏è Step 1: Create Database & Use It
    CREATE DATABASE HTS;
    USE HTS;

üè¢ Step 2: Create Tables
    CREATE TABLE employees (
        emp_id INT PRIMARY KEY,
        emp_name VARCHAR(100),
        salary DECIMAL(10, 2),
        dept_id INT,
        manager_id INT
    );

    CREATE TABLE managers (
        manager_id INT PRIMARY KEY,
        manager_name VARCHAR(100),
        dept_id INT
    );

    CREATE TABLE departments (
        dept_id INT PRIMARY KEY,
        dept_name VARCHAR(100)
    );

    CREATE TABLE projects (
        project_id INT PRIMARY KEY,
        project_name VARCHAR(100),
        team_member_id INT
    );

üì• Step 3: Insert Data
    INSERT INTO departments VALUES 
    (1, 'Engineering'),
    (2, 'Human Resources'),
    (3, 'Marketing'),
    (4, 'Finance'),
    (10, 'Technician');

    INSERT INTO managers VALUES 
    (101, 'Alice Johnson', 1),
    (102, 'Bob Smith', 2),
    (103, 'Catherine Lee', 3);

    INSERT INTO employees VALUES
    (1, 'John Doe', 60000, 1, 101),
    (2, 'Jane Smith', 55000, 1, 101),
    (3, 'Samuel Green', 50000, 2, 102),
    (4, 'Nina Patel', 52000, 3, 103),
    (5, 'Luke Brown', 48000, 4, NULL),
    (6, 'Emily Davis', 51000, 2, 102),
    (7, 'John Ram', 70000, 5, 101);

    INSERT INTO projects VALUES
    (201, 'Apollo Upgrade', 1),
    (202, 'HR Revamp', 3),
    (203, 'Marketing Blitz', 4),
    (204, 'Finance Audit', 5),
    (205, 'Onboarding Automation', 6),
    (206, 'System Overhaul', NULL);

‚úÖ Join Examples
1Ô∏è‚É£ INNER JOIN ‚Äì Employees & Departments
    SELECT e.emp_name, d.dept_name
    FROM employees e
    JOIN departments d ON e.dept_id = d.dept_id;
    +--------------+-------------------+
    | emp_name     | dept_name         |
    +--------------+-------------------+
    | John Doe     | Engineering       |
    | Jane Smith   | Engineering       |
    | Samuel Green | Human Resources   |
    | Nina Patel   | Marketing         |
    | Luke Brown   | Finance           |
    | Emily Davis  | Human Resources   |
    +--------------+-------------------+

2Ô∏è‚É£ LEFT JOIN ‚Äì All Employees (Even if No Department Match)

    SELECT e.emp_name, d.dept_name
    FROM employees e
    LEFT JOIN departments d ON e.dept_id = d.dept_id;
    +--------------+-------------------+
    | emp_name     | dept_name         |
    +--------------+-------------------+
    | John Doe     | Engineering       |
    | Jane Smith   | Engineering       |
    | Samuel Green | Human Resources   |
    | Nina Patel   | Marketing         |
    | Luke Brown   | Finance           |
    | Emily Davis  | Human Resources   |
    | John Ram     | NULL              |
    +--------------+-------------------+

3Ô∏è‚É£ RIGHT JOIN ‚Äì All Departments (Even if No Employees)
    SELECT e.emp_name, d.dept_name
    FROM employees e
    RIGHT JOIN departments d ON e.dept_id = d.dept_id;
    +--------------+-------------------+
    | emp_name     | dept_name         |
    +--------------+-------------------+
    | John Doe     | Engineering       |
    | Jane Smith   | Engineering       |
    | Samuel Green | Human Resources   |
    | Emily Davis  | Human Resources   |
    | Nina Patel   | Marketing         |
    | Luke Brown   | Finance           |
    | NULL         | Technician        |
    +--------------+-------------------+

üß© Complex Join: Employees + Department + Manager + Project
Step 1Ô∏è‚É£: Employees + Department
    SELECT e.emp_name, d.dept_name
    FROM employees e
    LEFT JOIN departments d ON e.dept_id = d.dept_id;
    +--------------+-------------------+
    | emp_name     | dept_name         |
    +--------------+-------------------+
    | John Doe     | Engineering       |
    | Jane Smith   | Engineering       |
    | Samuel Green | Human Resources   |
    | Nina Patel   | Marketing         |
    | Luke Brown   | Finance           |
    | Emily Davis  | Human Resources   |
    | John Ram     | NULL              |
    +--------------+-------------------+

Step 2Ô∏è‚É£: Add Manager Info
    SELECT e.emp_name, d.dept_name, m.manager_name
    FROM employees e
    LEFT JOIN departments d ON e.dept_id = d.dept_id
    INNER JOIN managers m ON m.manager_id = e.manager_id;
    +--------------+-------------------+------------------+
    | emp_name     | dept_name         | manager_name     |
    +--------------+-------------------+------------------+
    | John Doe     | Engineering       | Alice Johnson    |
    | Jane Smith   | Engineering       | Alice Johnson    |
    | Samuel Green | Human Resources   | Bob Smith        |
    | Nina Patel   | Marketing         | Catherine Lee    |
    | Emily Davis  | Human Resources   | Bob Smith        |
    | John Ram     | NULL              | Alice Johnson    |
    +--------------+-------------------+------------------+

Step 3Ô∏è‚É£: Add Project Info
    SELECT e.emp_name, d.dept_name, m.manager_name, p.project_name
    FROM employees e
    LEFT JOIN departments d ON e.dept_id = d.dept_id
    INNER JOIN managers m ON m.manager_id = e.manager_id
    LEFT JOIN projects p ON p.team_member_id = e.emp_id;
+--------------+-------------------+------------------+--------------------------+
| emp_name     | dept_name         | manager_name     | project_name             |
+--------------+-------------------+------------------+--------------------------+
| John Doe     | Engineering       | Alice Johnson    | Apollo Upgrade           |
| Jane Smith   | Engineering       | Alice Johnson    | NULL                     |
| Samuel Green | Human Resources   | Bob Smith        | HR Revamp                |
| Nina Patel   | Marketing         | Catherine Lee    | Marketing Blitz          |
| Emily Davis  | Human Resources   | Bob Smith        | Onboarding Automation    |
| John Ram     | NULL              | Alice Johnson    | NULL                     |
+--------------+-------------------+------------------+--------------------------+