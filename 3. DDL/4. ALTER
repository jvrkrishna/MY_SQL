üß± ALTER Command in MySQL
Used to change the structure of an existing table.

‚úÖ Common Uses:
    .Adding a new column.(Alter with add)
    .Delete an existing column.(Alter with drop)
    .Change column datatype.(Alter with modify)
    .Change column Size.(Alter with modify)
    .Rename the column.(Alter with rename)
    .Adding new constraints.(Alter with add)

******************************************************************************************
==> Adding a new column:
    We will use AlTER with ADD command for adding new column.

    Syntax:
        ALTER TABLE <tablename> ADD<col_name> datatype(size);

    Example:
        ALTER table stud_info ADD Address VARCHAR(20);


    Adding Multiple Columns:
    Syntax:
        ALTER TABLE table_name 
        ADD (column1_name datatype(size), column2_name datatype(size));

    Example:
        ALTER TABLE stud_info 
        ADD (Marks INT, Gender CHAR(1));

Practical:
CREATE DATABASE COLLEGE;
USE COLLEGE;

CREATE TABLE stud_info (
    Roll INT,
    Name VARCHAR(30),
    Course VARCHAR(20)
);


SHOW DATABASES;
SELECT * FROM stud_info;

#To add column in the existing table
ALTER table stud_info ADD Address VARCHAR(20);

#To see the column is added or not just describe the table.
DESC stud_info;

#Add multiple columns
ALTER table stud_info ADD (Marks INT,Gender CHAR);
DESC stud_info;

******************************************************************************************
==> DELETE an existing column:
    .We will use ALTER with DROP command to delete an existing column.

    Syntax:
        Alter table <table_name> DROP <column_name>;
    
    Delete Multiple Columns:
        Alter table<table_name> 
        DROP <column1_name>,
        DROP <column2_name>,
        DROP <column3_name>;

Practical
#Create table
CREATE TABLE stud_info1 (
    Roll INT,
    Name VARCHAR(30),
    Course VARCHAR(20),
    Address VARCHAR(50),
    Marks INT,
    Gender CHAR(1)
);

#Delete Single Column
ALTER TABLE stud_info DROP Address;

DESC stud_info1;

#Delete multi columns from a table
ALTER TABLE stud_info 
DROP Marks,
DROP Gender;

DESC stud_info;

******************************************************************************************
==> Change column datatype:
    We will use AlTER with MODIFY command to change column datatype.

    Syntax:
        ALTER Table <table_name> MODIFY <col_name> datatype(size);

    To change multiple Datatypes:
        ALTER TABLE <table_name>
            MODIFY <col1_name> datatype(size),
            MODIFY <col2_name> datatype(size),
            MODIFY <col3_name> datatype(size);

Practical
#Add multiple columns
ALTER table stud_info ADD (Marks INT,Gender CHAR);
DESC stud_info;

#Modify Column datatype
ALTER table stud_info MODIFY Marks FLOAT;
DESC stud_info;

#Modify multiple columns
ALTER table stud_info 
MODIFY Marks INT,
MODIFY Gender Varchar(20);
DESC stud_info;

******************************************************************************************
==> Rename the column
    We will use AlTER with RENAME command to rename the column name.
    Syntax:
        ALTER TABLE <table_name> RENAME COLUMN <old_col_name> to <new_col_name>;

    To rename multi columns
        ALTER TABLE <table_name>
        RENAME COLUMN <old_col_name> to <new_col_name>,
        RENAME COLUMN <old_col_name> to <new_col_name>,
        RENAME COLUMN <old_col_name> to <new_col_name>;

Practical
ALTER TABLE stud_info  RENAME COLUMN Marks to Mark;
DESC stud_info;

******************************************************************************************
‚úÖ SQL Constraints
    We use SQL constraints to specify the rules for the data in a table.
    Constraints are used to limit which type of data must be stores in the database.
    SQL constraints increase the accuracy and reliability of the data stored in the database.
    Constraints make sure that there is no violation in terms of a transaction of the data.

What if there is any violation found?
The action gets terminated or aborted.

Constraints in SQL are:
-->NOT NULL
-->UNIQUE
-->PRIMARY KEY
-->FOREIGN KEY
-->CHECK
-->DEFAULT

==========================================================================================
==>NOT NULL
    Ensures a column cannot have a NULL value.
    The NOT NULL constraint makes sure that a column cannot have a NULL value.
    We can use the NOT NULL constraint either creating the table in the database or while modifying it.
    We can have more than one NOT NULL columns in a table.

HOW to add NOT NULL constraint to column/columns?
    -->NOT NULL constraint on CREATE TABLE

Practical:
       CREATE TABLE employee(
        ID int(6) NOT NULL,
        NAME varchar(10) NOT NULL,
        ADDRESS varchar(20)
       );

    DESC employee;
    
    INSERT INTO employee(ID,NAME,ADDRESS) values(1,'Ram','Kakinada');
    INSERT INTO employee(ID,NAME,ADDRESS) values(NULL,'Ram','Kakinada'); ---Raises error id cannot be null.

‚ûï Add NOT NULL to Existing Table:
If the table already exists, you can add the NOT NULL constraint using:

    ALTER TABLE employee 
    MODIFY NAME VARCHAR(10) NOT NULL;

üîê Note: You can only add NOT NULL to a column if all existing values in that column are non-null.
Because the NOT NULL rule says:
    ‚ÄúThis column must always have a value.‚Äù

So if the table already has some rows where the column is NULL, then allowing the NOT NULL constraint would violate that rule for existing data.

Suppose you have this table:
    CREATE TABLE student (
        id INT,
        name VARCHAR(20)
    );

    INSERT INTO student VALUES (1, 'Alice');
    INSERT INTO student VALUES (2, NULL); -- NULL value

Now, if you try to make the name column NOT NULL:
    ALTER TABLE student 
    MODIFY name VARCHAR(20) NOT NULL;

üëâ You will get an error, because row 2 has a NULL in the name column.

‚úÖ How to Fix It:
1. Check for NULLs:
    SELECT * FROM student WHERE name IS NULL;

2. Update NULLs:
Replace them with some default value if appropriate:

    UPDATE student SET name = 'Unknown' WHERE name IS NULL;

3. Then Add the Constraint:
    ALTER TABLE student 
    MODIFY name VARCHAR(20) NOT NULL;


==========================================================================================
UNIQUE:
    The UNIQUE constraint makes sure that all values in a column must be unique.
    This constraint helps to uniquely identify each row in the table.
    We can have more than one UNIQUE column in a table.
    We can use this constraint on the CREATE and ALTER table command.

How to add UNIQUE constraint to column/columns?
    -->UNIQUE constraint on CREATE TABLE

‚û§ Practical:
CREATE TABLE:
    CREATE TABLE employee (
        ID INT(6) UNIQUE,
        NAME VARCHAR(10) NOT NULL,
        MOBILE INT(10),
        ADDRESS VARCHAR(20)
    );


DESC employee;
-- ‚úÖ Valid insert
INSERT INTO employee(ID, NAME, MOBILE, ADDRESS) 
VALUES (1, 'Raj', 9876543210, 'Kakinada');

-- ‚ùå Invalid insert: duplicate ID
INSERT INTO employee(ID, NAME, MOBILE, ADDRESS) 
VALUES (1, 'Raj', 9876543211, 'Kakinada');
-- Error: Duplicate entry '1' for key 'ID'

-- ‚ùå Invalid insert: duplicate MOBILE
INSERT INTO employee(ID, NAME, MOBILE, ADDRESS) 
VALUES (2, 'Ravi', 9876543210, 'Hyderabad');
-- Error: Duplicate entry '9876543210' for key 'MOBILE'

‚ûï To Add UNIQUE Later Using ALTER TABLE:
‚úÖ Step 1: Make sure there are no duplicates
Check for duplicates before applying the constraint:
    SELECT MOBILE, COUNT(*) 
    FROM employee 
    GROUP BY MOBILE 
    HAVING COUNT(*) > 1;

If this returns no rows, it means all mobile numbers are currently unique, and you can safely proceed.

‚úÖ Step 2: Add the UNIQUE constraint
ALTER TABLE employee 
ADD CONSTRAINT unique_mobile UNIQUE (MOBILE);

üß™ Test Insert After Adding UNIQUE:
-- ‚úÖ This works
INSERT INTO employee (ID, NAME, MOBILE, ADDRESS)
VALUES (1, 'Raj', 9876543210, 'Kakinada');

-- ‚ùå This fails: duplicate mobile
INSERT INTO employee (ID, NAME, MOBILE, ADDRESS)
VALUES (2, 'Ravi', 9876543210, 'Hyderabad');
-- Error: Duplicate entry '9876543210' for key 'unique_mobile'

==========================================================================================
PRIMARY KEY
    A Primary key is a field which can uniquely identify each row in a table.
    Primary keys must contain UNIQUE values, and cannot contain NULL values.
    A Table can have only ONE primary key and this primary key can consist of single or multiple columns.
    We can use this constraint on the CREATE and ALTER table command.

    NOT NULL+UNIQUE=PRIMARY KEY

#How to add PRIMARY KEY constraint on a Table?
Primary key constraint on Create table

Practical
CREATE TABLE employee(
    ID int(6),
    NAME varchar(10) NOT NULL,
    ADDRESS varchar(20),
    PRIMARY KEY(ID)  #PRIMARY KEY(ID,NAME) ---for combination of multiple columns
);

#We can write like this also
CREATE TABLE employee(
    ID int(6) PRIMARY KEY,
    NAME varchar(10) NOT NULL PRIMARY KEY,
    ADDRESS varchar(20)
);

DESC employee;

#Below code also done same job what the above code done.(i.e., NOT NULL+UNIQUE=PRIMARY KEY)
CREATE TABLE employee(
    ID int(6) NOT NULL UNIQUE,
    NAME varchar(10) NOT NULL,
    ADDRESS varchar(20)
);

DESC employee;

#Add some data to check PRIMARY KEY Constraint
INSERT INTO employee(ID,NAME,ADDRESS) VALUES(1,'Ram','Kakinada')

#Repeate once Again ---- raises error Duplicate entry
INSERT INTO employee(ID,NAME,ADDRESS) VALUES(1,'Ram','Kakinada')

#Repeat once again with ID NULL ------ raises error ID cannot be null
INSERT INTO employee(ID,NAME,ADDRESS) VALUES(NULL,'Ram','Kakinada')

==========================================================================================
FOREIGN KEY
A foreign key is a field(or collection of fields) points to the PRIMARY KEY of another table.
Table with the foreign key is called the child table and the table with the primary key is called the referenced or parent table.
The foreign key constraint is used to prevent actions that would destroy links between tables.
We can use this constraint on the CREATE and ALTER table command.

Check the primary key and foreign key relation in online.

Practical
*********** DEPARTMENT TABLE **************
CREATE TABLE department(
    ID int(6) PRIMARY KEY,
    DEPT_NAME varchar(10) NOT NULL
);

#Adding data to Department Table
INSERT INTO department(ID,DEPT_NAME) VALUES(1,"Admin")
INSERT INTO department(ID,DEPT_NAME) VALUES(2,"HR")
INSERT INTO department(ID,DEPT_NAME) VALUES(3,"DEVELOPER")
INSERT INTO department(ID,DEPT_NAME) VALUES(4,"TESTER")
INSERT INTO department(ID,DEPT_NAME) VALUES(5,"ACCOUNTS")
INSERT INTO department(ID,DEPT_NAME) VALUES(6,"BUSINESS ANALYST")

select * from department;

#How to add FOREIGN KEY constraint on a Table?
FOREIGN KEY constraint on CREATE TABLE
CREATE TABLE employee(
    ID int(6) NOT NULL,
    NAME varchar(10) NOT NULL,
    ADDRESS varchar(20),
    DEPT_ID int(6),
    FOREIGN KEY (DEPT_ID) REFERENCES department(ID)
);

DESC employee;

Add some data to check FOREIGN KEY constraint
INSERT INTO employee(ID,NAME,ADDRESS,DEPT_ID) VALUES(1,"Ram","KAKINADA",3)
INSERT INTO employee(ID,NAME,ADDRESS,DEPT_ID) VALUES(2,"Raju","KAKINADA",9) ----It gives error because in department table no record with id 9.

select * from department;

==========================================================================================
CHECK
The CHECK constraint makes sure that all values in a column satisfy a specific condition.
We can use this constraint on the CREATE and ALTER table command.

How to add CHECK constraint on a column?
CHECK constraintn on CREATE TABLE

Practical
CREATE TABLE employee(
    ID int(6),
    NAME varchar(10) CHECK(NAME !='Ram'),
    ADDRESS varchar(20)
);

#The above code meaning is if we try to insert record where the value of name column is equal to 'Ram' gives an error.

INSERT INTO employee(ID,NAME,ADDRESS) VALUES(1,'Raj',"KAKINADA");
select * form employee
INSERT INTO employee(ID,NAME,ADDRESS) VALUES(2,'Ram',"KAKINADA"); ---It gives an error

#Another Example to Restrict the AGE should be greater than 18
CREATE TABLE employee(
    ID int(6),
    NAME varchar(10),
    AGE varchar(10) CHECK(AGE>18),
    ADDRESS varchar(20)
);

==========================================================================================
DEFAULT
The DEFAULT constraint is used to set default values for a column when no value is specified.
The default value will be added to all new records, if no other value is specified.
We can use this constraint on the CREATE and ALTER table command.

How to add DEFAULT constraint on a column?
Default constarint on CREATE TABLE

Practical:
CREATE TABLE employee(
    ID int(6),
    NAME varchar(30) DEFAULT 'NEW USER',
    ADDRESS varchar(20)
);

DESC employee;

#Add some data to check Default constraint
INSERT INTO employee(ID, ADDRESS) VALUES(1,'Kakinada')

select * from employee;

