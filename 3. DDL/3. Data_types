üóÉÔ∏è MySQL Data Types
In MySQL, data types are generally classified into three categories:

1. String Data Types
2. Numeric Data Types
3. Date and Time Data Types

üî§ 1. String Data Types
Used to store text, characters, or binary data.

Note: MySQL doesn't have a data type called "STRING"; instead, it provides specific types for different use cases.

‚úÖ Common String Data Types:
Data Type	      Description
CHAR	          Fixed-length character string
VARCHAR	          Variable-length character string
TEXT	          Large text values
BINARY	          Fixed-length binary string
BLOB	          Binary Large Object (used for images, audio, etc.)
ENUM	          One value from a predefined list
SET	              One or more values from a predefined list

üîπ CHAR
. Stores fixed-length character strings.
. Can store alphabets, numbers, and symbols.
. Size range: 0 to 255 characters.
. Default size: 1
. Takes 1 byte per character.
. Suitable when you know the exact length of the string.

üîπ VARCHAR
. Stores variable-length character strings.
. Must define size (required).
. Size range: 0 to 65,535 (actual max depends on row size and character set).
. Takes 1 byte per character plus extra space for length information.
. Good for dynamic-length strings.

üîπ TEXT
Used for long text values, up to 65,535 characters.

üîπ BINARY
. Similar to CHAR but stores binary data (e.g., images).

üîπ BLOB
. Used for binary large objects, up to 65,535 bytes.

üîπ ENUM
. Stores one value from a predefined list.
    Example: ENUM('Male', 'Female')

üîπ SET
. Stores multiple values from a predefined list.
    Example: SET('Reading', 'Music', 'Travel')


üî¢ 2. Numeric Data Types
Used to store numbers ‚Äî both integers and floating-point values.

Every numeric type can be SIGNED (positive and negative) or UNSIGNED (only positive).
Default: SIGNED.
‚úÖ Common Integer Types:
| Data Type         | Signed Range             | Unsigned Range |
| **TINYINT**       | -128 to 127              | 0 to 255       |
| **SMALLINT**      | -32,768 to 32,767        | 0 to 65,535    |
| **MEDIUMINT**     | -8,388,608 to 8,388,607  | 0 to 16,777,215|
| **INT / INTEGER** |-2147483648 to 2147483647 | 0 to 4294967295|
| **BIGINT**        | Very large integer values|                |


‚úÖ Floating-Point Types:
. FLOAT(precision, scale)
. DOUBLE(precision, scale)
Precision = total number of digits
Scale = digits after the decimal point
Example:
    salary FLOAT(7, 2); -- allows values like 12345.67

üîπ BIT
. Stores bit field values (binary).
. Must use b'' notation.
Example:
    b'1111' = 15  
    b'11101' = 29

üïí 3. Date and Time Data Types
Used to store dates, times, and timestamps.
| Data Type     | Format               | Range
| **DATE**      | `YYYY-MM-DD`         | `'1000-01-01'` to `'9999-12-31'`

| **TIME**      | `HH:MM:SS`           | `'-838:59:59'` to `'838:59:59'`

| **DATETIME**  | `YYYY-MM-DD HH:MM:SS`| `'1000-01-01 00:00:00'` to  `'9999-12-31 23:59:59'`

| **TIMESTAMP** | `YYYY-MM-DD HH:MM:SS`| `'1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC` |

| **YEAR**      | `YYYY`               | 1901 to 2155 |


