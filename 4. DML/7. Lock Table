In MySQL, locks are used to control concurrent access to database objects like tables and rows, preventing conflicts and ensuring data consistency. The LOCK TABLES statement allows explicit table-level locking, while InnoDB storage engine uses row-level locking. MySQL also uses metadata locks to manage concurrent changes to database structures. 

Note : To view the connection id----->SELECT CONNECTION_ID();

üîê Types of Locks in MySQL
1. üß± Table-Level Locks
    Applies to: MyISAM, MEMORY, MERGE engines.
    Scope: Entire table.
    Use case: Simple systems with low concurrency or heavy reads.

üî∏ Behavior:
    READ lock: Other sessions can read, but not write.
    WRITE lock: Other sessions cannot read or write.

‚úÖ Example:
LOCK TABLES emp_info READ;       -- Locks for read-only
LOCK TABLES emp_info WRITE;      -- Locks for read/write exclusively
UNLOCK TABLES;

2. üìå Row-Level Locks
    Applies to: InnoDB engine.
    Scope: Individual rows.
    Use case: High-concurrency systems; ensures minimal contention.

üî∏ Benefits:
    High concurrency (many users can read/write different rows).
    Locks are held only within transactions.

‚úÖ Example:
    START TRANSACTION;
    SELECT * FROM emp_info WHERE id = 5 FOR UPDATE;
    -- Row is locked for update by this session
    COMMIT;

3. üóÇÔ∏è Metadata Locks (MDL)
    Scope: Schema objects like tables, views, procedures.
    When used: Every time you query or modify a table or structure.

üî∏ Use cases:
    Prevents changes to table structure during query execution.
    Acquired automatically by MySQL.

‚ö†Ô∏è Example:
-- Session 1
    SELECT * FROM emp_info; -- Implicit metadata lock is held

-- Session 2
    ALTER TABLE emp_info ADD COLUMN age INT; -- Will block until Session 1 finishes

4. üìå Record Locks
    Applies to: InnoDB with indexes.
    Scope: Specific index entries.
    Use case: To prevent others from changing specific indexed rows.

üî∏ Works under the hood of row-level locking:
    Prevents phantom reads and ensures ACID properties.

üîÑ Mixed Lock Example:
    LOCK TABLES orders READ, products WRITE;
    Locks orders for reading: ‚úÖ others can read ‚ùå cannot write.
    Locks products for writing: ‚ùå others cannot read or write.

üß† Key Concepts Summary
Concept	          Description
Read Lock	      Allows multiple sessions to read, but no writing.
Write Lock	      One session can read/write; others are fully blocked.
Deadlock	      Two sessions waiting on each other's locks. Handled by InnoDB 
                  with rollback.
Lock Granularity  Row (fine), Table (coarse), Metadata (DDL-level).

************************************************************************************
Practical
‚úÖ Step 1: Create Database and Table
CREATE DATABASE IF NOT EXISTS employee;
USE employee;

CREATE TABLE emp_info (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    address VARCHAR(100),
    salary FLOAT
) ENGINE=InnoDB;

‚úÖ Step 2: Insert Sample Data
INSERT INTO emp_info (id, name, address, salary) VALUES
(1, 'Ram', 'Hyderabad', 30000),
(2, 'Ravi', 'Vizag', 32000),
(3, 'Rani', 'Chennai', 40000);

üîí Part 1: Table-Level Locks (Using LOCK TABLES)

‚úÖ Step 3: Lock Table in READ Mode
    LOCK TABLE emp_info READ;

. Other sessions can also read the table, but no session (including yours) can write/modify the data until the lock is released.

üö´ Example: Try to write while locked
INSERT INTO emp_info VALUES (4, 'Raju', 'KKD', 45000); -- ‚ùå Will fail in READ lock

‚úÖ Step 4: Unlock Table
UNLOCK TABLES;

‚úÖ Step 5: Lock Table in WRITE Mode
LOCK TABLE emp_info WRITE;

. Only your session can read and write the table.
. Other sessions cannot read or write until you issue UNLOCK TABLES.

üîê Part 2: Row-Level Locks (InnoDB Only)
These are done inside transactions and affect only selected rows.

‚úÖ Step 6: Lock a Row for Update
START TRANSACTION;

SELECT * FROM emp_info WHERE id = 1 FOR UPDATE;

üîí What This Does (Row Locking with FOR UPDATE):
Step	            Effect
START TRANSACTION	Begins a new transaction (changes won't be permanent until 
                    COMMIT).
SELECT FOR UPDATE	Locks the row where id = 1 for exclusive update access.

-- Now this row is locked exclusively for current session.
-- No other session can update this row until COMMIT (they can read).

-- Now you can safely update the row
START TRANSACTION;
UPDATE emp_info SET salary = 60000 WHERE id = 1;

-- Save changes and release the lock
COMMIT;

‚úÖ Step 7: Lock a Row for Shared Read
START TRANSACTION;

SELECT * FROM emp_info WHERE id = 2 LOCK IN SHARE MODE;

What This Does (Shared Row Lock):
Step	            Effect
START TRANSACTION	Begins a transaction ‚Äì locks stay until COMMIT or ROLLBACK.
LOCK IN SHARE MODE	Locks the row for shared read. You and others can read, but    
                    others cannot write/update/delete that row until you commit.

COMMIT;

üß† What Are Metadata Locks in MySQL?
Metadata Locks (MDL) are locks that MySQL automatically uses to protect the structure of database objects (like tables, schemas, stored procedures, etc.) during access or change.

üîê Why Metadata Locks Exist
They prevent structural conflicts such as:
    One session trying to read from a table
    While another session is trying to DROP or ALTER the same table

üì¶ When Are Metadata Locks Acquired?
ActionType	        Example	                                Lock Purpose
Querying a table	SELECT * FROM emp_info;	                Lock to prevent schema 
                                                            changes while reading
Changing schema	    ALTER TABLE emp_info ADD COLUMN dept;	Lock to ensure no one 
                                                            is using the table during modification
Transaction start	START TRANSACTION; SELECT ...	        Locks table structure 
                                                            until COMMIT or ROLLBACK

üö´ Common Metadata Lock Issues
You try to ALTER a table but it hangs. Why? Another session is reading from it inside a transaction.

You try to DROP a table but another session has it open.

üß™ Example Scenario
Session 1:
START TRANSACTION;
SELECT * FROM emp_info;
-- Keeps metadata lock on emp_info until COMMIT

Session 2 (runs during Session 1's transaction):
ALTER TABLE emp_info ADD COLUMN email VARCHAR(100);
-- ‚ùå This will hang until Session 1 commits or rolls back

üß™ Check Metadata Locks
SELECT * FROM performance_schema.metadata_locks;


üß© Part 4: MySQL Advisory Locks ‚Äî Custom Named Locks for App-Level Coordination
Advisory locks in MySQL are user-defined application-level locks, not tied to specific tables or rows.
‚úÖ Syntax: GET_LOCK() and RELEASE_LOCK()
üîí Acquire a Lock
    SELECT GET_LOCK('my_custom_lock', 10);

'my_custom_lock' ‚Üí A name you define (string).
10 ‚Üí Maximum wait time in seconds.
Returns 1 if lock is acquired, 0 if not, NULL on error.

üîì Release a Lock
SELECT RELEASE_LOCK('my_custom_lock');
Returns 1 if released, 0 if not held, NULL on error.

************************************************************************************
Practical Example:
üß± Step 1: Create Table
CREATE TABLE EMP_INFO (
    ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    SALARY FLOAT
);

üì• Step 2: Insert Sample Data
INSERT INTO EMP_INFO (ID, FIRST_NAME, LAST_NAME, SALARY) VALUES
(1, 'Ram', 'Kumar', 25000),
(2, 'Ravi', 'Sharma', 30000);

üîÑ Step 3: Simulate Advisory Locking

üßë‚Äçüíª Session 1: Acquire Lock Before Update
-- Try to get the advisory lock
SELECT GET_LOCK('emp_salary_update', 5);
-- Output: 1 (Lock acquired)

-- Now safely update salary (protected by the lock)
UPDATE EMP_INFO SET SALARY = SALARY + 1000 WHERE ID = 1;

üßë‚Äçüíª Session 2 (runs at same time): Try to Acquire Same Lock
-- Try to get the same lock
SELECT GET_LOCK('emp_salary_update', 5);
-- Output: 0 (Could not acquire, Session 1 holds it)

‚úÖ Session 1: Done with Work, Release Lock
-- Release the advisory lock
SELECT RELEASE_LOCK('emp_salary_update');
-- Output: 1 (Lock released)

üßë‚Äçüíª Session 2: Try Again After Lock Released
-- Try again (after Session 1 releases)
SELECT GET_LOCK('emp_salary_update', 5);
-- Output: 1 (Now it‚Äôs acquired)

-- Session 2 can now proceed safely
UPDATE EMP_INFO SET SALARY = SALARY + 500 WHERE ID = 2;

-- Release when done
SELECT RELEASE_LOCK('emp_salary_update');

üîé Final Check
SELECT * FROM EMP_INFO;
Output:

ID	FIRST_NAME	LAST_NAME	SALARY
1	Ram	Kumar	26000
2	Ravi	Sharma	30500
