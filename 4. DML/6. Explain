üß† What is EXPLAIN in MySQL?
    In MySQL, EXPLAIN (or EXPLAIN PLAN) is a command that shows how MySQL executes a query. It's a key tool for analyzing and optimizing SQL queries, helping you understand:

EXPLAIN shows:
    üîπWhich indexes are used (or not used)
    üîπThe order in which tables are read (join order)
    üîπThe estimated number of rows MySQL will need to examine
    üîπWhether temporary tables or filesorts are used

üîç Step-by-Step Walkthrough of EXPLAIN in MySQL
‚úÖ Step 1: Create a Table
CREATE TABLE EMP_INFO (
    ID INT PRIMARY KEY,
    NAME VARCHAR(50),
    SALARY FLOAT,
    DEPARTMENT VARCHAR(50)
);

‚úÖ Step 2: Insert Sample Data
INSERT INTO EMP_INFO (ID, NAME, SALARY, DEPARTMENT) VALUES
(1, 'Ram', 10000, 'HR'),
(2, 'Ravi', 15000, 'Finance'),
(3, 'Rani', 10000, 'IT'),
(4, 'Raju', 12000, 'HR'),
(5, 'Rajesh', 18000, 'IT');

‚úÖ Step 3: View the Table Structure
DESC EMP_INFO;

Output:
    +------------+-------------+------+-----+---------+-------+
    | Field      | Type        | Null | Key | Default | Extra |
    +------------+-------------+------+-----+---------+-------+
    | ID         | int         | NO   | PRI | NULL    |       |
    | NAME       | varchar(50) | YES  |     | NULL    |       |
    | SALARY     | float       | YES  |     | NULL    |       |
    | DEPARTMENT | varchar(50) | YES  |     | NULL    |       |
    +------------+-------------+------+-----+---------+-------+
This shows column names, data types, and whether they're indexed (e.g., PRI for primary key).

‚úÖ Step 4: Check Indexes
SHOW INDEXES FROM EMP_INFO;
Since only the primary key ID exists, this output will show one index on the ID column.
This displays:
    Key_name ‚Äî the name of the index
    Column_name ‚Äî column the index applies to
    Cardinality ‚Äî how unique the data is
    Non_unique ‚Äî whether duplicates are allowed (0 = unique)

‚úÖ Step 5: Use EXPLAIN to Analyze a Query
üî∏ Query without an index:
EXPLAIN SELECT NAME FROM EMP_INFO WHERE SALARY = 10000;
Sample Output:
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
| id | select_type | table    | type | possible_keys | key  | key_len | ref  | rows | Extra       |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+
|  1 | SIMPLE      | EMP_INFO | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using where |
+----+-------------+----------+------+---------------+------+---------+------+------+-------------+

üü° Explanation:
    type: ALL ‚Üí Full table scan
    key: NULL ‚Üí No index used
    rows: 5 ‚Üí Estimated rows to examine
    Extra: Using where ‚Üí MySQL will filter after scanning

‚úÖ Step 6: Add an Index for Optimization
    CREATE INDEX idx_salary ON EMP_INFO(SALARY);

Now run the same query again:
    EXPLAIN SELECT NAME FROM EMP_INFO WHERE SALARY = 10000;

Improved Output:
+----+-------------+----------+------+---------------+------------+---------+-------+------+--------------------------+
| id | select_type | table    | type | possible_keys | key        | key_len | ref   | rows | Extra                    |
+----+-------------+----------+------+---------------+------------+---------+-------+------+--------------------------+
|  1 | SIMPLE      | EMP_INFO | ref  | idx_salary    | idx_salary | 5       | const |    2 | Using index condition    |
+----+-------------+----------+------+---------------+------------+---------+-------+------+--------------------------+

üü¢ Much better:
    type: ref ‚Üí Index-based lookup
    key: idx_salary ‚Üí Index is used
    rows: 2 ‚Üí Only 2 rows estimated